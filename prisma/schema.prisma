generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid()) @db.Uuid
  email            String    @unique
  emailVerified    DateTime? @db.Timestamptz(6)
  name             String?
  image            String?
  username         String?   @unique
  bio              String?
  timezone         String    @default("UTC")
  defaultDuration  Int       @default(30)
  allowedDurations Int[]     @default([15, 30, 60])
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @default(now()) @db.Timestamptz(6)

  availability  Availability[]
  blockedDates  BlockedDate[]
  bookings      Booking[]      @relation("HostBookings")
  
  // NextAuth relationships
  accounts Account[]
  sessions Session[]
}

model Availability {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  dayOfWeek Int      // 0 = Sunday, 6 = Saturday
  startTime DateTime @db.Time
  endTime   DateTime @db.Time
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BlockedDate {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  blockedDate  DateTime @db.Date
  reason       String?
  createdAt    DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Booking {
  id         String   @id @default(uuid()) @db.Uuid
  hostId     String   @db.Uuid
  guestName  String
  guestEmail String
  bookingDate DateTime @db.Date
  startTime  DateTime  @db.Time
  endTime    DateTime  @db.Time
  notes      String?
  status     String    @default("confirmed")

  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  host User @relation("HostBookings", fields: [hostId], references: [id], onDelete: Cascade)

  @@index([hostId])
  @@index([bookingDate])
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}